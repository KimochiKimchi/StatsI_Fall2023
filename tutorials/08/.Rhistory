# Set working directory as path where file is located
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##Puts the file in the folder where the R script is
getwd()
# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load zipped data from url
if(!require(readr)){
install.packages("readr")
library(readr)}
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Reshape data from long to wide
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID",
idvar = c("country","date","iso3c"),
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # merge variables in left
by.y=c("year","ccodealp"), # merge variables in right
all.x=TRUE, # merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename columns
names(df)
View(wb)
View(wb_re)
View(wb_re)
View(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
# Save df
write.csv(df, "df_income_mortality.csv")
morocco <- read_csv(https://www.afrobarometer.org/survey-resource/morocco-round-9-data-2023/)
morocco <- read_csv(https://www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav)
morocco <- read_csv(https:/www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav)
morocco <- read_csv(https:www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav)
morocco <- read_csv(https:\www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav)
morocco <- read_csv(https://www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav)
morocco <- read_csv(https://ucdp.uu.se/downloads/candidateged/GEDEvent_v23_0_9.csv)
UCDP <- read_csv(https:\ucdp.uu.se/downloads/candidateged/GEDEvent_v23_0_9.csv)
morocco <- read_csv("https://www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav")
morocco <- read_sav("https://www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav")
morocco <- read_csv("https://ucdp.uu.se/downloads/candidateged/GEDEvent_v23_0_9.csv")
UGDP <- read_csv("https://ucdp.uu.se/downloads/candidateged/GEDEvent_v23_0_9.csv")
UCDP <- read_csv("https://ucdp.uu.se/downloads/candidateged/GEDEvent_v23_0_9.csv")
# Set working directory as path where file is located
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##Puts the file in the folder where the R script is
getwd()
# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load zipped data from url
if(!require(readr)){
install.packages("readr")
library(readr)}
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Reshape data from long to wide
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID",
idvar = c("country","date","iso3c"),
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # merge variables in left
by.y=c("year","ccodealp"), # merge variables in right
all.x=TRUE, # merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename columns
names(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
View(df)
# Save df
write.csv(df, "df_income_mortality.csv")
UCDP <- read_csv("https://ucdp.uu.se/downloads/candidateged/GEDEvent_v23_0_9.csv")
# Load df
df <- read_csv("df_income_mortality_best.csv")
View(UCDP)
library(haven)}
if(!require(haven)){
install.packages("haven")
library(haven)}
morocco <- read_sav("https://www.afrobarometer.org/wp-content/uploads/2023/06/MOR_R9.data_.final_.wtd_release.14Feb23.sav")
View(morocco)
View(UCDP)
View(morocco)
view(UCDP)
# Set working directory as path where file is located
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load zipped data from url
if(!require(readr)){
install.packages("readr")
library(readr)}
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Reshape data from long to wide
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID",
idvar = c("country","date","iso3c"),
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # merge variables in left
by.y=c("year","ccodealp"), # merge variables in right
all.x=TRUE, # merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename columns
names(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
View(df)
# Save df
write.csv(df, "df_income_mortality.csv")
# Load zipped data from url
temp <- tempfile(fileext = ".zip") # Initiate temporary file
# Download zip as temporary file
download.file("https://ucdp.uu.se/downloads/ged/ged231-csv.zip", temp, mode="wb")
ucdp <- read_csv(temp) # Read data
View(ucdp)
# Data on armed conflicts:
# UCDP Georeferenced Event Dataset (GED)
# https://ucdp.uu.se/downloads/index.html#ged_global
View(ucdp)
# Install required package
if(!require(haven)){
install.packages("haven")
library(haven)}
# Load sav file
afro <- read_sav("https://www.afrobarometer.org/wp-content/uploads/2023/06/SRL_R9.data_.final_.wtd_release.14Feb23.sav")
# Load sav file
afro <- read_sav("https://www.afrobarometer.org/wp-content/uploads/2023/06/SRL_R9.data_.final_.wtd_release.14Feb23.sav")
afro$Q1
# How to aggregate data?
# Which variables do we need?
ucdp[,c("country", "year", "best")]
# Aggregate ucdp from event to the country-year level.
ucdp_agg <- aggregate(ucdp$best, # Variable to aggregate
list(ucdp$country, ucdp$year), # Group variables
FUN=sum) # How to aggregate, sum
View(ucdp_agg)
# Merge
df <- merge(df, # Left df
ucdp_agg, # Right df
by.x=c("date","country"), # merge variables in left
by.y=c("Group.2","Group.1"), # merge variables in right
all.x=TRUE, # merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename column
names(df)[9] <- "best"
View(df)
# Why do we see missing values?
# Missing values mean that country-year was not in UCDP data,
# so there were no fatalities.
# We can replace with 0s.
df$best[is.na(df$best)] = 0
# Save df
write.csv(df, "df_income_mortality_best.csv")
# Get unique countries in df
df_uni <- select(df, country) # Select variable
df_uni <- distinct(df_uni, country) # Get unique values
View(df_uni)
df_uni
# Filter (subset is base R)
df_s <- filter(df, country %in% c("Afghanistan","Italy"))
df_s
df_grouped <- group_by(df, date)
View(df_grouped)
df_mean_inc <- summarize(df_grouped,
n=n(), # calculates the number of cases
mean_inc=mean(gdp_per_cap), # Mean
max_mort=max(mort)) # Max
## On the left we have the name we gave to variable, and then on the right the function
df_mean_inc
# Get the mean income and max child mortality for each year
df_grouped <- group_by(df, date) # Group by year
df_mean_inc <- summarize(df_grouped,
n=n(), # Counts
mean_inc=mean(gdp_per_cap, na.rm=TRUE), # Mean
max_mort=max(mort)) # Max
df_mean_inc
# Check if df has missing values
sum(is.na(df$gdp_per_cap))
sum(is.na(df$mort))
# Option I: Replace missing values with zero, but be careful!
df_na <- replace(df, is.na("gdp_per_cap"), 0) # one variable
# Option II: Replace missing values with mean
df_na <- df # Copy
# Option II: Replace missing values with mean
df_na <- df # Copy
df_na$gdp_per_cap <- replace_na(data=df_na$gdp_per_cap,
replace=mean(df_na$gdp_per_cap, # Value to replace NA with
na.rm = TRUE))
# Option III: Replace missing values with group mean
df_na <- group_by(df_na, country) # Group
df_na <- mutate(df_na, # Replace with mean if value is missing
sec_enrol = ifelse(is.na(sec_enrol),
mean(sec_enrol, na.rm = TRUE),
sec_enrol))
# Re-coding variables, in Base R
# Create categorical income variable
df_na$income_cat <- 0 # Create empty variable
summary(df_na$gdp_per_cap) # Check quantile
summary(df_na$gdp_per_cap)[2]
df_na$income_cat[df_na$gdp_per_cap>summary(df_na$gdp_per_cap)[2]] <- 1 # Replace step by step
df_na$income_cat[df_na$gdp_per_cap>summary(df_na$gdp_per_cap)[3]] <- 2
df_na$income_cat[df_na$gdp_per_cap>summary(df_na$gdp_per_cap)[5]] <- 3
View(df_na)
View(df_na)
# Re-coding variables, in Base R
# Create categorical income variable
df_na$income_cat <- 0 # Create empty variable
View(df_na)
summary(df_na$gdp_per_cap) # Check quantile
summary(df_na$gdp_per_cap)[2]
df_na$income_cat[df_na$gdp_per_cap>summary(df_na$gdp_per_cap)[2]] <- 1 # Replace step by step
df_na$income_cat[df_na$gdp_per_cap>summary(df_na$gdp_per_cap)[2]] <- 1 # Replace step by step
View(df_na)
df_na$income_cat[df_na$gdp_per_cap>summary(df_na$gdp_per_cap)[3]] <- 2
View(df_na)
df_na$income_cat[df_na$gdp_per_cap>summary(df_na$gdp_per_cap)[5]] <- 3
# Convert into factor
typeof(df_na$income_cat)
df_na$income_cat <- factor(df_na$income_cat,
labels = c("low","medium_low","medium_high","high"))
typeof(df_na$income_cat)
is.factor(df_na$income_cat)
levels(df_na$income_cat)
# Re-coding variables, in tidyverse
# Create categorical income variable
quantile(df_na$gdp_per_cap) # Check quantiles
df_na <- mutate(df_na, income_cat2=cut(gdp_per_cap, # Variable
breaks=quantile(df_na$gdp_per_cap), # Breaks
labels=c("low","medium_low","medium_high","high"))) # Labels
is.factor(df_na$income_cat2)
# Base R
mean(df_na[df_na$democracy==0,]$gdp_per_cap)
mean(df_na[df_na$democracy==1,]$gdp_per_cap)
# Group data, lagged variable needs to be country specific
df_na_g <- arrange(df_na, country, date) # Important, sort rows beforehand!
# Base R
mean(df_na[df_na$country=="Afghanistan",]$gdp_per_cap)
# Tidyverse:
df_sub <- filter(df_na, country=="Afghanistan")
df_sub <- summarise(df_sub, mean = mean(gdp_per_cap))
df_sub
# Step by step:
df_na[df_na$democracy==0,] # Subset rows
df_na[df_na$democracy==0,]$gdp_per_cap # Subset columns
mean(df_na[df_na$democracy==0,]$gdp_per_cap) # Calculate mean
# Tidyverse:
df_grouped <- group_by(df_na, democracy) # Group by regime type
df_mean_inc <- summarize(df_grouped,
mean_inc=mean(gdp_per_cap)) # Mean
# Group data, lagged variable needs to be country specific
df_na_g <- arrange(df_na, country, date) # Important, sort rows beforehand!
df_na_g <- group_by(df_na_g, country) # Group by country
df_na <- mutate(df_na_g,
income_lag = lag(gdp_per_cap, n = 1)) # Calculate t-1 lag
View(df_na_g)
View(df_na_g)
View(df_na_g)
# Use piping
df_na <-
df_na %>%
arrange(country, date)  %>%
group_by(country) %>%
mutate(income_lag = lag(gdp_per_cap, n = 1))
View(df_na)
# Step 1: Create 'help' variable, lagged regime type
View(df_na) # Make sure data is sorted
df_na_g <- group_by(df_na, country) # Group data by country
df_na <- mutate(df_na_g,
democracy_lag = lag(democracy, n = 1)) # Calculate t-1 lag
View(df_na)
# Step 2: Recode
df_na$regime_change <- 0 # Create empty variable
# Replace with 1 if current regime type is the same as t-1 regime type
df_na$regime_change[df_na$democracy_lag!=df_na$democracy] <- 1
View(df_na)
# Replace with 1 if current regime type is the same as t-1 regime type
df_na$regime_change[df_na$democracy_lag!=df_na$democracy] <- 1
View(df_na)
# Scatter plot
scatter <-
ggplot(data = df_na, # --> data
mapping = aes(x = gdp_per_cap,
y = mort)) +  # --> aesthetic mapping
geom_point() # --> geometric object, scatter plot
# Print plot object
scatter
