# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer", "vioplot", "arm"),  pkgTest)
install.packages("mvtnorm")
# Adopted from p. 153
set.seed(37943) # Set the seed for reproducible results
reps <- 1000 # Set the number of repetitions at the top of the script
b0 <- .2 # True value for the intercept
b1 <- .5 # True value for the slopes
b2 <- .75
n <- 1000 # Sample size
# Level of IV correlation
cor.level <- c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, .99)
# Empty matrix to store the estimates
par.est.ov <- matrix(NA, nrow = reps, ncol = length(cor.level))
cor.level
for(j in 1:length(cor.level)){ # Start the j loop
for(i in 1:reps){ # Start the loop
#i <- 1
#j <- 1
X.corr <- matrix(c(1, cor.level[j], cor.level[j], 1), nrow = 2, ncol = 2)
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
par.est.ov[i, j] <- model$coef[2] # Put the estimate for the coefficient on
# X1 in column j
} # End the i loop
} # End the j loop
# Print estimates
par.est.ov
for(j in 1:length(cor.level)){ # Start the j loop
for(i in 1:reps){ # Start the loop
#i <- 1
#j <- 1
X.corr <- matrix(c(1, cor.level[j], cor.level[j], 1), nrow = 2, ncol = 2)
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
par.est.ov[i, j] <- model$coef[2] # Put the estimate for the coefficient on
# X1 in column j
} # End the i loop
} # End the j loop
# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(mvtnorm)){
install.packages("mvtnorm")
library(mvtnorm)}
for(i in 1:reps){ # Start the loop
#i <- 1
#j <- 1
X.corr <- matrix(c(1, cor.level[j], cor.level[j], 1), nrow = 2, ncol = 2)
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
par.est.ov[i, j] <- model$coef[2] # Put the estimate for the coefficient on
# X1 in column j
} # End the i loop
# Print estimates
par.est.ov
for(i in 1:reps){ # Start the loop
i <- 1
j <- 1
X.corr <- matrix(c(1, cor.level[j], cor.level[j], 1), nrow = 2, ncol = 2)
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
par.est.ov[i, j] <- model$coef[2] # Put the estimate for the coefficient on
# X1 in column j
} # End the i loop
# Print estimates
par.est.ov
j <- 1
i <- 1
for(j in 1:length(cor.level)){ # Start the j loop
for(i in 1:reps){ # Start the loop
i <- 1
j <- 1
j <- 2
par.est.ov
# Print estimates
par.est.ov
# Get mean of estimates
# True b1 is 0.5
mean(par.est.ov[ , 1]) # r=0
X.corr
for(j in 1:length(cor.level)){ # Start the j loop
for(i in 1:reps){ # Start the loop
i <- 1
j <- 2
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
# Print estimates
print(par.est.ov)
View(par.est.ov)
View(par.est.ov)
View(model)
for(j in 1:length(cor.level)){ # Start the j loop
for(i in 1:reps){ # Start the loop
#i <- 1
#j <- 2
X.corr <- matrix(c(1, cor.level[j], cor.level[j], 1), nrow = 2, ncol = 2)
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
par.est.ov[i, j] <- model$coef[2] # Put the estimate for the coefficient on
# X1 in column j
for(j in 1:length(cor.level)){ # Start the j loop
for(i in 1:reps){ # Start the loop
#i <- 1
#j <- 2
X.corr <- matrix(c(1, cor.level[j], cor.level[j], 1), nrow = 2, ncol = 2)
X <- rmvnorm(n, mean = c(0, 0), sigma = X.corr) # Create two correlated
X1 <- X[ , 1]                                   # independent variables
X2 <- X[ , 2]
Y <- b0 + b1*X1 + b2*X2 + rnorm(n, 0, 1) # The true DGP, with N(0, 1) error
model <- lm(Y ~ X1) # Estimate OLS model
par.est.ov[i, j] <- model$coef[2] # Put the estimate for the coefficient on
# X1 in column j
} # End the i loop
} # End the j loop
# Adopted from p. 153
set.seed(37943) # Set the seed for reproducible results
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer", "vioplot", "arm"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer", "vioplot", "arm"),  pkgTest)
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer", "vioplot", "arm"),  pkgTest)
