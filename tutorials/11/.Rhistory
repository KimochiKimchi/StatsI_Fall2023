View(column_proportions)
str(column_proportions)
# Step 1: Replace NAs with 0 in each column
subset <- subset %>% mutate_all(replace(., is.na(.), 0))
# Step 1: Replace NAs with 0 in each column
subset <- subset %>% mutate(replace(is.na(.), 0))
.,
# Step 1: Replace NAs with 0 in each column
subset <- subset %>% mutate(replace(, is.na(.), 0))
# Step 1: Replace NAs with 0 in each column
Q12NAs <- subset %>%
# We specify names_prefix in order to make column name matching in the next step easier
tidyr::pivot_wider(names_from = "Q12_1", names_prefix = "Q12_1", values_from = "Q12_1") %>%
# Note the usage of lambda (anonymous) function to modify multiple columns at once
dplyr::mutate(
dplyr::across(tidyselect::starts_with("Q12_1"),
function(x) ifelse(is.na(x), 0, 1)
))
View(Q12NAs)
# Step 1: Replace NAs with 0 in each column
NoNAs <- mutate_all(subset, ~replace_na(.,0))
View(NoNAs)
subset(lapply(dat,as.numeric))
subset(lapply(data,as.numeric))
combined_languages <- do.call(rbind, subset)
View(combined_df)
View(combined_languages)
combined_languages <- do.call(cbind, subset)
View(combined_languages)
View(combined_languages)
Kaggle <- read.csv("C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv")
subset <- select(Kaggle,Q12_1:Q12_15)
combined_languages <- do.call(cbind, subset)
View(combined_languages)
NAs <- model.matrix(~Q12_1+Q12_2+Q12_3+Q12_4+Q12_5+Q12_6+Q12_7+Q12_8+Q12_9+Q12_10+Q12_11+Q12_12+Q12_13+Q12_14+Q12_15+0, subset)
View(NAs)
combined_languages <- do.call(rbind, subset)
Kaggle <- read.csv("C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv")
subset <- select(Kaggle,Q12_1:Q12_15)
combined_languages <- do.call(rbind, subset)
View(combined_languages)
combined_languages <- do.call(cbind, subset)
View(combined_languages)
# Step 1: Replace NAs with 0 in each column
NoNAs <- mutate_all(subset, ~replace_na(.,0))
View(NoNAs)
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_proportions <- subset %>%
summarise(across(everything(), ~ list(prop.table(table(.)))), .names = "percentage_{.col}")
View(column_proportions)
Percentages <- subset %>% group_by(subset) %>% mutate_each(funs(./tot))
Percentages <- subset %>% group_by(subset) %>% mutate_each(./tot)
Percentages <- subset %>% group_by(Q12_1) %>% mutate_each(./tot)
str(column_proportions)
#Creating a list with the percentages of each column
percentages <- df(c(column_proportions$Q12_1*100,column_proportions$Q12_2*100, column_proportions$Q12_3*100))
#Creating a list with the percentages of each column
percentages <- df(c(column_proportions$Q12_1$*100,column_proportions$Q12_2$*100, column_proportions$Q12_3$*100))
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_proportions <- subset %>%
summarise(across(everything(), ~ 100* list(prop.table(table(.)))), .names = "percentage_{.col}")
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_proportions <- subset %>%
summarise(across(everything(), ~ 100* prop.table(table(.)))), .names = "percentage_{.col}")
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_percentages <- subset %>%
summarise(across(everything(), ~ 100 * prop.table(table(.))), .names = "percentage_{.col}")
View(column_percentages)
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_percentages <- subset %>%
summarise(across(everything(), ~ 100 * prop.table(table(.))), .names = "Percentage of respondents who use each language")
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_percentages <- subset %>%
summarise(across(everything(), ~ 100 * prop.table(table(.))), .names = "Percentage of respondents who use each language")
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_percentages <- subset %>%
summarise(across(everything(), ~ 100 * prop.table(table(.))), .names = "Percentages")
}
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_proportions <- subset %>%
summarise(across(everything(), ~ 100* prop.table(table(.)))), .names = "percentage_{.col}")
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_percentages <- subset %>%
summarise(across(everything(), ~ 100 * prop.table(table(.))), .names = "percentage_{.col}")
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_percentages <- subset %>%
reframe(across(everything(), ~ 100 * prop.table(table(.))), .names = "percentage_{.col}")
View(column_percentages)
# Step 2: Calculate the percentage of "yes" and "no" in each column
column_percentages <- subset %>%
reframe(across(everything(), ~ 100 * prop.table(table(.))), .names = "percentage_{.col}")
View(column_percentages)
subset <- Kaggle(c("Q12_1":"Q12_15"))
Kaggle <- read.csv("C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv")
subset <- Kaggle(c("Q12_1":"Q12_15"))
kaggle2022 <- readr::read_csv(PATH, col_names = names(questions), skip = 2)
subset <- kaggle2022(c("Q12_1":"Q12_15"))
kaggle2022 <- readr::read_csv(PATH, col_names = names(questions), skip = 2)
subset <- kaggle2022(c("Q12_1":"Q12_15"))
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
Kaggle <- read.csv("C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv")
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
library(readr)
Kaggle <- read.csv("C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv")
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
Kaggle <- "C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv"
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
questions <- readr::read_csv(PATH, n_max = 1)
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
questions <- readr::read_csv(Kaggle, n_max = 1)
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
subset <- kaggle2022(c("Q12_1":"Q12_15"))
subset <- kaggle2022[c("Q12_1":"Q12_15")]
View(subset)
combined_languages <- do.call(cbind, subset)
head(subset)
library(dplyr)
ModelMatrix <- model.matrix(~ Q12_1+0, subset)
View(ModelMatrix)
View(subset)
head(ModelMatrix)
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1))
combined_languages <- do.call(cbind, subset)
View(combined_languages)
combined_languages %>%
dplyr::filter(!is.na(Q12_1))
ModelMatrix <- model.matrix(~ Q12_1+0, combined_languages)
Kaggle <- read.csv("C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv")
questions <- readr::read_csv(Kaggle, n_max = 1)
library(readr)
library(dplyr)
Kaggle <- "C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv"
questions <- readr::read_csv(Kaggle, n_max = 1)
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
subset <- kaggle2022[c("Q12_1":"Q12_15")]
View(subset)
sort(table(kaggle2022["Q12_1"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_2"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_3"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_4"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_5"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_6"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_7"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_8"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_9"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_10"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_11"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_12"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_13"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_14"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_15"]), decreasing = TRUE)/nrow(kaggle2022)*100
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1))
kaggle2022 %>%
dplyr::filter(!is.na(Q2))
kaggle2022 %>%
dplyr::filter(!is.na(Q6_1))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_2))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_3))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_4))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_5))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_6))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_7))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_8))
sort(table(kaggle2022["Q12_1"]), decreasing = TRUE)/nrow(kaggle2022)*100
kaggle2022 %>%
dplyr::filter(!is.na(Q12_9))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_10))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_11))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_12))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_13))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_14))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_15))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1:Q12_15))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1+Q12_15))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1 & Q12_15))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1 & Q12_2))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1, Q12_2))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1 || Q12_2))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1 | Q12_2))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1))&filter(!is.na(Q12_2))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1))&filter(!is.na(Q12_2))&filter(!is.na(Q12_3))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1))&filter(!is.na(Q12_2))&filter(!is.na(Q12_3))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) || filter(!is.na(Q12_2))&filter(!is.na(Q12_3))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2))&filter(!is.na(Q12_3))
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3))
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3))
View(NoNAs)
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>% filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
View(NoNAs)
kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>% filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
View(kaggle2022)
View(NoNAs)
View(subset)
View(questions)
View(column_percentages)
View(ModelMatrix)
View(kaggle2022)
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>% filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
View(kaggle2022)
View(combined_languages)
combined_languages <- do.call(cbind, NoNAs)
subset
combined_languages <- do.call(cbind, subset)
View(subset)
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>% filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
NoNAs <- subset %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>% filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
View(subset)
View(kaggle2022)
View(ModelMatrix)
library(readr)
library(dplyr)
Kaggle <- "C:\\Users\\Lenovo\\Desktop\\Computer Programming 2023\\kaggle_survey_2022_responses.csv"
questions <- readr::read_csv(Kaggle, n_max = 1)
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
subset <- kaggle2022[c("Q12_1":"Q12_15")]
NoNAs <- subset %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>% filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
combined_languages <- do.call(cbind, subset)
sort(table(kaggle2022["Q12_1"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_2"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_3"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_4"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_5"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_6"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_7"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_8"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_9"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_10"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_11"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_12"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_13"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_14"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_15"]), decreasing = TRUE)/nrow(kaggle2022)*100
NoNAs <- subset %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3))
subset <- kaggle2022[c("Q12_1":"Q12_15")]
kaggle2022 <- readr::read_csv(Kaggle, col_names = names(questions), skip = 2)
subset <- kaggle2022[c("Q12_1":"Q12_15")]
subset <- kaggle2022[c(Q12_1:Q12_15)]
subset <- kaggle2022[c("Q12_1":"Q12_15")]
list[c("Q12_1","Q12_2")]
vec[c("Q12_1","Q12_2")]
percentages <- data.frame(c["Q12_1","Q12_2"])
percentages <- c(sort(table(kaggle2022["Q12_1"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_2"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_3"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_4"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_5"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_6"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_7"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_8"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_9"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_10"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_11"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_12"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_13"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_14"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_15"]), decreasing = TRUE)/nrow(kaggle2022)*100
)
percentages <- list(sort(table(kaggle2022["Q12_1"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_2"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_3"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_4"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_5"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_6"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_7"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_8"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_9"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_10"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_11"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_12"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_13"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_14"]), decreasing = TRUE)/nrow(kaggle2022)*100,
sort(table(kaggle2022["Q12_15"]), decreasing = TRUE)/nrow(kaggle2022)*100
)
View(percentages)
View(percentages)
##Creating a dataframe for percentages
languages <- c("Python","R","SQL","C","C#","C++","Java","Javascript","Bash","PHP","Matlab","Julia","Go","None","Other")
languagepicked <- c(77.73,19.05,40.09,15.84,6.14,18.96,16.09,14.54,6.98,6.01,10.17,1.23,1.34,1.07,5.60)
percentages <- data.frame(languages,languagespicked)
percentages <- data.frame(languages,languagepicked)
sort(percentages,decreasing=TRUE)
sort(percentages$languagepicked,decreasing=TRUE)
subset <- Kaggle[c("Q12_1":"Q12_15")]
subset <- Kaggle[c("Q12_1":"Q12_15")]
subset <- kaggle2022["Q12_1":"Q12_15"]
subset <- kaggle2022[c("Q12_1":"Q12_15")]
subset <- kaggle2022[c(kaggle2022$Q12_1:kaggle2022$Q12_15)]
View(kaggle2022)
subset <- kaggle2022$Q12_1:kaggle2022$Q12_15
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3))
View(NoNAs)
sort(table(kaggle2022["Q12_1"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_2"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_3"]), decreasing = TRUE)/nrow(kaggle2022)*100
sort(table(kaggle2022["Q12_4"]), decreasing = TRUE)/nrow(kaggle2022)*100
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>%
filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3)) %>%
filter(!is.na(Q12_4)) %>%
filter(!is.na(Q12_5)) %>% filter(!is.na(Q12_6)) %>% filter(!is.na(Q12_7))%>%
filter(!is.na(Q12_8)) %>% filter(!is.na(Q12_9)) %>%
filter(!is.na(Q12_10)) %>% filter(!is.na(Q12_11)) %>%
filter(!is.na(Q12_12)) %>% filter(!is.na(Q12_13)) %>%
filter(!is.na(Q12_14)) %>% filter(!is.na(Q12_15))
View(NoNAs)
NoNAs <- kaggle2022 %>%
dplyr::filter(!is.na(Q12_1)) %>% filter(!is.na(Q12_2)) %>% filter(!is.na(Q12_3))
View(NoNAs)
percentages <- percentages %>%
arrange(desc(languagepicked))
View(percentages)
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer","arm","emmeans","ggplot2"),  pkgTest)
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
library(stargazer)
library(arm)
library(emmeans)
install.packages("emmeans")
library(emmeans)
# Load data
df <- read.csv("../../datasets/ess_euroscepticism.csv", row.names="X")
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load data
df <- read.csv("../../datasets/ess_euroscepticism.csv", row.names="X")
# Convert into factor variable
df$edu_cat <- factor(df$edu_cat)
is.factor(df$edu_cat)
# Complete case analysis
df_na <- df[complete.cases(df), ]
# Create dummy variables
df_na$JuniorCycle <- ifelse(df_na$edu_cat == "Junior Cycle", 1, 0)
df_na$LeavingCertificate <- ifelse(df_na$edu_cat == "Leaving Certificate", 1, 0)
df_na$AdvancedCertificate <- ifelse(df_na$edu_cat == "Advanced Certificate", 1, 0)
df_na$Bachelor <- ifelse(df_na$edu_cat == "Bachelor Degree", 1, 0)
df_na$Postgraduate <- ifelse(df_na$edu_cat == "Postgraduate Degree", 1, 0)
# Fit model (ref=JuniorCycle)
model <- lm(euftf_re~LeavingCertificate+AdvancedCertificate+Bachelor+Postgraduate,data=df_na)
# Fit model (ref=JuniorCycle)
model <- lm(euftf_re~LeavingCertificate+AdvancedCertificate+Bachelor+Postgraduate,data=df_na)
summary(model)
# Change reference category to leaving certificate
model <- lm(euftf_re~JuniorCycle+AdvancedCertificate+Bachelor+Postgraduate,data=df_na)
summary(model)
# Education--Categorical independent variable
is.factor(df_na$edu_cat)
model1 <- lm(euftf_re~edu_cat,data=df_na)
summary(model1)
# Change reference category to leaving certificate
levels(df_na$edu_cat) # First level, "Advanced Certificate"
df_na$edu_cat <- relevel(df_na$edu_cat, ref = 4)
levels(df_na$edu_cat) # First level, "Leaving Certificate"
# Refit model
model1 <- lm(euftf_re~edu_cat,data=df_na)
summary(model1)
# Education--Continuous independent variable
model1 <- lm(euftf_re~edlvdie,data=df_na)
summary(model1)
# Add economic dimension
model_eco <- lm(euftf_re~edlvdie + hinctnta,data=df_na)
summary(model_eco)
# Add political dimension
model_pol <- lm(euftf_re~edlvdie + hinctnta + trstplt, data=df_na)
summary(model_pol)
# Add cultural dimension
model_cul <- lm(euftf_re~edlvdie + hinctnta + trstplt + imwbcnt, data=df_na)
summary(model_cul)
# Add socio-economic variables
model_final <- lm(euftf_re~edlvdie + hinctnta + trstplt + imwbcnt + gndr + agea + brncntr, data=df_na)
summary(model_final)
# Get Latex table
stargazer(model1,model_eco,model_pol,model_cul,model_final)
# How to visualize results?
coefplot(model_final) # 95% Confidence intervals (and 50% CIs)
coefplot(model1, add=TRUE, col.pts="gray")
# Fit model
model1 <- lm(euftf_re~edu_cat+imwbcnt,data=df_na)
# Plot
plot(df_na$imwbcnt, df_na$euftf_re)
# Recode dummy variables as 0,1; needed for interactions
df_na$gndr <- ifelse(df_na$gndr == 2, 1, 0)
# And convert into factor
df_na$gndr <- factor(df_na$gndr, labels = c("Male", "Female"))
# Fit model
model_int <- lm(euftf_re~edlvdie +
imwbcnt +
gndr +
imwbcnt*gndr, data=df_na)
summary(model_int)
# Get slopes for levels of categorical variables
summary(model_int)$coefficients[3]
summary(model_int)$coefficients[3]+summary(model_int)$coefficients[5]
# Or use emmeans package
emtrends(model_int, ~ gndr, var="imwbcnt")
# Visualize estimated marginal means (EMMs)
emmip(model_int,
gndr ~ imwbcnt,
at=list(imwbcnt=seq(0,10,by=1), gndr=c("Male","Female"), edlvdie=mean(df_na$edlvdie)),
plotit = TRUE,
CIs = TRUE)
# We can also use predict
predict(model_int,
newdata=data.frame(imwbcnt=0,gndr="Male",edlvdie=mean(df_na$edlvdie)))
