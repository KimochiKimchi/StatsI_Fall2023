# Get working directory
getwd()
# Set working directory
setwd("C:/Users/Lenovo/Documents/GitHub/StatsI_Fall2023")
getwd()
library(wbstats)}
# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Reshape data from long to wide (put rows in columns)
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID", # New columns
idvar = c("country","date","iso3c"), # Identifiers for rows
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
install.packages("wbstats")
install.packages("wbstats")
install.packages("tidyverse")
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Reshape data from long to wide (put rows in columns)
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID", # New columns
idvar = c("country","date","iso3c"), # Identifiers for rows
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Load Quality of Government data
qog <- read.csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # Merge variables in left
by.y=c("year","ccodealp"), # Merge variables in right
all.x=TRUE, # Merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename columns
names(df)
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
View(df)
View(qog)
View(wb)
View(wb_re)
View(qog)
# Option I: Replace missing values with zero, but be careful!
df_na <- df %>% replace(is.na(.), 0)
# Get unique countries in df
df_uni <- select(df, country) # Select variable
df_uni <- distinct(df_uni, country) # Get unique values
# Export Latex table
stargazer(model)
# Fit model
model <- lm(mort ~ gdp_per_cap, data=df_na)
library(stargazer)
##First I set my working directory
getwd()
setwd("C:/Users/Lenovo/Documents/GitHub/StatsI_Fall2023/")
rm(list=ls())
##Importing relevant libraries
library(DescTools)
library(stargazer)
##Creating a data frame for our variable
##Code from: https://sparkbyexamples.com/r-programming/select-rows-with-row-names-in-r-2/#:~:text=By%20default%2C%20row%20names%20are,names%20use%20colnames()%20function.
Not_Stopped <- c(14,7)
Bribe_Requested <- c(6,7)
Stopped_Given_Warning <- c(7,1)
PolSci <- data.frame(Not_Stopped,Bribe_Requested,Stopped_Given_Warning,
row.names = c('Upper Class','Lower class'))
str(PolSci)
names(PolSci)
##Next, I calculate the expected frequency for each row and column
##Formula to calculate expected frequencies:((Row total)*(Column Total))/Total sample size
(27*21)/42
(15*21)/42
(27*13)/42
(15*13)/42
(27*8)/42
(15*8)/42
##I have all the required values to find the chi-square test statistic value
##The formula is ((observed frequency-expected frequency)^2)/expected frequency
ChiSquareStatistic <- (((14-13.5)^2)/13.5) + (((6-8.36)^2)/8.36) + (((7-5.14)^2)/5.14) + (((7-7.5)^2)/7.5) + (((7-4.64)^2)/4.64) + (((1-2.86)^2)/2.86)
pvalue <- pchisq(3.80,df=2, lower.tail=FALSE)
##We can double check our "by hand" chi square test using the chisq.test function in R
chisq.test(PolSci)
##Saving chi-square test in an object
chi_testR <- chisq.test(PolSci)
##Finally, we need to calculate the standardized residuals for each cell
##The formula for this is (observed frequency - expected frequency)/se
##where standard error= sqrt(expected frequency(1-row proportion)(1-column proportion))
ls(chi_testR)
chi_testR$stdres
##Q2
##First I input the dataset for this question
Economics <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
##Q2 b)Bivariate regression in R
##Using the lm function
reg <- lm(Economics$water ~ Economics$reserved, Economics)
reg
summary(reg)
stargazer(reg)
confint(reg) # using the confint function to get confidence intervals for our estimates
names(reg)
(15*8)/42 # = 2.86
##I have all the required values to find the chi-square test statistic value
##The formula is ((observed frequency-expected frequency)^2)/expected frequency
ChiSquareStatistic <- (((14-13.5)^2)/13.5) + (((6-8.36)^2)/8.36) + (((7-5.14)^2)/5.14) + (((7-7.5)^2)/7.5) + (((7-4.64)^2)/4.64) + (((1-2.86)^2)/2.86)
##We can double check our "by hand" chi square test using the chisq.test function in R
chisq.test(PolSci)
StdRes <- chi_testR$stdres
View(StdRes)
stargazer(StdRes)
confint(reg) # using the confint function to get confidence intervals for our estimates
summary(reg)
str(PolSci)
names(PolSci)
calculateStdResiduals <- rstandard(reg)
rm(list=ls(calculateStdResiduals))
rm(list=ls(calculateStdResiduals)
rm(list=ls(calculateStdResiduals))
rm(ls(calculateStdResiduals)
rm(list=ls())
rm(list=ls())
##Importing relevant libraries
library(DescTools)
library(stargazer)
##Creating a data frame for our variable
##Code from: https://sparkbyexamples.com/r-programming/select-rows-with-row-names-in-r-2/#:~:text=By%20default%2C%20row%20names%20are,names%20use%20colnames()%20function.
Not_Stopped <- c(14,7)
Bribe_Requested <- c(6,7)
Stopped_Given_Warning <- c(7,1)
PolSci <- data.frame(Not_Stopped,Bribe_Requested,Stopped_Given_Warning,
row.names = c('Upper Class','Lower class'))
str(PolSci)
##Next, I calculate the expected frequency for each row and column
##Formula to calculate expected frequencies:((Row total)*(Column Total))/Total sample size
(27*21)/42 # = 13.50
(15*21)/42 # = 7.50
(27*13)/42 # = 8.36
(15*13)/42 # = 4.64
(27*8)/42 # = 5.14
(15*8)/42 # = 2.86
##I have all the required values to find the chi-square test statistic value
##The formula is ((observed frequency-expected frequency)^2)/expected frequency
ChiSquareStatistic <- (((14-13.5)^2)/13.5) + (((6-8.36)^2)/8.36) + (((7-5.14)^2)/5.14) + (((7-7.5)^2)/7.5) + (((7-4.64)^2)/4.64) + (((1-2.86)^2)/2.86)
pvalue <- pchisq(3.80,df=2, lower.tail=FALSE)
##We can double check our "by hand" chi square test using the chisq.test function in R
chisq.test(PolSci)
##Saving chi-square test in an object
chi_testR <- chisq.test(PolSci)
##Finally, we need to calculate the standardized residuals for each cell
##The formula for this is (observed frequency - expected frequency)/se
##where standard error= sqrt(expected frequency(1-row proportion)(1-column proportion))
ls(chi_testR)
StdRes <- chi_testR$stdres ##storing the standardized residuals in an object
stargazer(StdRes) ##Using the stargazer function, to get code for making a table in Latex
##Q2
##First I input the dataset for this question
Economics <- read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
##Q2 b)Bivariate regression in R
##Using the lm function
reg <- lm(Economics$water ~ Economics$reserved, Economics)
reg
summary(reg)
confint(reg) # using the confint function to get confidence intervals for our estimates
names(reg)
reg$coefficients
stargazer(reg)
##This result suggests that having the GP reserved for women is estimated to increase
##This result suggests that having the GP reserved for women is estimated to increase
##the number of drinking water facilities by 9.25 facilities with a 95% confidence interval
