# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer","vioplot","arm","broom","ggplot2","fastDummies"),  pkgTest)
# Only include Ireland and relevant variables.
df <- read.csv("C:/Users/Lenovo/Documents/GitHub/StatsI_Fall2023/datasets/ESS10.csv")
df_s <- df[df$cntry=="IE", c("euftf","edlvdie","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
View(df_s)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Reverse euftf, to measure euroscepticism more intuitively
df_s["euftf_re"] = 10 - df_s[ ,c("euftf")]
View(df_s)
# Categorize education levels
df_s["edu_cat"] <- NA
df_s[(df_s$edlvdie==1) | (df_s$edlvdie==2) | (df_s$edlvdie==3) | (df_s$edlvdie==4), c("edu_cat")] <- 1 # Junior Cycle
df_s[(df_s$edlvdie==5) | (df_s$edlvdie==6) | (df_s$edlvdie==7) | (df_s$edlvdie==8) | (df_s$edlvdie==9), c("edu_cat")] <- 2 # Leaving Certificate
df_s[(df_s$edlvdie==10) | (df_s$edlvdie==11) | (df_s$edlvdie==12), c("edu_cat")] <- 3 # Advanced Certificate
df_s[(df_s$edlvdie==13) | (df_s$edlvdie==14) | (df_s$edlvdie==15), c("edu_cat")] <- 4 # Bachelor Degree
df_s[(df_s$edlvdie==16) | (df_s$edlvdie==17) | (df_s$edlvdie==18), c("edu_cat")] <- 5 # Postgraduate Degree
View(df_s)
# Convert into factor variable
df_s$edu_cat <- factor(df_s$edu_cat,
levels = c(1,2,3,4,5),
labels = c("Junior Cycle",
"Leaving Certificate",
"Advanced Certificate",
"Bachelor Degree",
"Postgraduate Degree"))
View(df_s)
levels(df_s$edu_cat)
typeof(df_s$edu_cat)
# Record missing values
df_s[(df_s == -67) | (df_s == -78) | (df_s == -89) | (df_s == 77) | (df_s == 88) | (df_s == 99) | (df_s == 999) | (df_s == 5555) | (df_s == 7777) | (df_s == 8888) | (df_s == 9999)] <- NA
# Save dataset
write.csv(df_s, "../../datasets/ess_euroscepticism.csv")
# Initial investigation ----------
df <- read.csv("../../datasets/ess_euroscepticism.csv", row.names="X")
View(df)
is.factor(df$edu_cat)
# Convert into factor variable
df$edu_cat <- factor(df$edu_cat)
is.factor(df$edu_cat)
# Descriptive plots
par(mar = c(5, 5, 2, 2)) # Change margins in plot manually
vioplot(df$euftf_re ~ df$edu_cat)
plot(df$edlvdie,df$euftf_re)
plot(jitter(df$edlvdie,2),jitter(df$euftf_re,2))
# Descriptive plots
par(mar = c(5, 5, 2, 2)) # Change margins in plot manually
vioplot(df$euftf_re ~ df$edu_cat)
?par
boxplot(df$euftf_re ~ df$edu_cat)
# Simple model only considering socio-demographic variables
model_base <- lm(euftf_re~gndr + agea + brncntr, data=df)
summary(model_base)
# Simple linear regression
model_base <- lm(euftf_re~brncntr, data=df)
summary(model_base)
View(df_s)
# Continuous independent variable
model1 <- lm(euftf_re~edlvdie,data=df)
summary(model1)
# Create dummy variables
df$JuniorCycle <- ifelse(df$edu_cat == "Junior Cycle", 1, 0)
df$LeavingCertificate <- ifelse(df$edu_cat == "Leaving Certificate", 1, 0)
df$AdvancedCertificate <- ifelse(df$edu_cat == "Advanced Certificate", 1, 0)
df$Bachelor <- ifelse(df$edu_cat == "Bachelor Degree", 1, 0)
df$Postgraduate <- ifelse(df$edu_cat == "Postgraduate Degree", 1, 0)
# Fit model
model1 <- lm(euftf_re~LeavingCertificate+AdvancedCertificate+Bachelor+Postgraduate,data=df)
View(model_base)
View(df_s)
# Create dummy variables
df$JuniorCycle <- ifelse(df$edu_cat == "Junior Cycle", 1, 0)
df$LeavingCertificate <- ifelse(df$edu_cat == "Leaving Certificate", 1, 0)
df$AdvancedCertificate <- ifelse(df$edu_cat == "Advanced Certificate", 1, 0)
df$Bachelor <- ifelse(df$edu_cat == "Bachelor Degree", 1, 0)
df$Postgraduate <- ifelse(df$edu_cat == "Postgraduate Degree", 1, 0)
View(df)
# Faster way to create dummy set
df <- dummy_cols(df, select_columns = "edu_cat")
View(df)
# Change reference category to leaving certificate
model1 <- lm(euftf_re~JuniorCycle+AdvancedCertificate+Bachelor+Postgraduate,data=df)
summary(model1)
# Change reference category to leaving certificate
df$edu_cat <- relevel(df$edu_cat, ref = 4)
levels(df$edu_cat) # First level, "Leaving Certificate"
# Refit model
model1 <- lm(euftf_re~edu_cat,data=df)
summary(model1)
# Change reference category
# Which one should we select?
plot(df$edu_cat)
levels(df$edu_cat) # First level, "Advanced Certificate"
# Change reference category to leaving certificate
df$edu_cat <- relevel(df$edu_cat, ref = 4)
# Categorical independent variable, using factor variales
is.factor(df$edu_cat)
model1 <- lm(euftf_re~edu_cat,data=df)
summary(model1)
model2 <- lm(euftf_re~hinctnta,data=df)
summary(model2)
model3 <- lm(euftf_re~trstplt,data=df)
summary(model3)
model4 <- lm(euftf_re~imwbcnt,data=df)
summary(model4)
# Add economic dimension
model_eco <- lm(euftf_re~edlvdie + hinctnta,data=df)
summary(model_eco)
nobs(model_eco) # Number of observations in model
# Education--Continuous independent variable
model1 <- lm(euftf_re~edlvdie,data=df)
summary(model1)
nobs(model1) # Number of observations in model
# Add economic dimension
model_eco <- lm(euftf_re~edlvdie + hinctnta,data=df)
summary(model_eco)
nobs(model_eco) # Number of observations in model
# The easiest solution is to remove rows with missing values
df_na <- df[complete.cases(df), ]
# Let's start again, using only complete cases (df_na)
# Education--Continuous independent variable
model1 <- lm(euftf_re~edlvdie,data=df_na)
summary(model1)
# Add economic dimension
model_eco <- lm(euftf_re~edlvdie + hinctnta,data=df_na)
summary(model_eco)
#Starting the script by setting the working directory
getwd()
setwd("C:\\Users\\Lenovo\\Documents\\GitHub\\StatsI_Fall2023")
getwd()
#Inputting the data into R
incumbent <- read.csv("C:\\Users\\Lenovo\\Documents\\GitHub\\StatsI_Fall2023\\datasets\\incumbents_subset.csv")
##Question1
#Running a regression using lm with voteshare as the output variable and difflog as the input variable
q1 <- lm(voteshare~difflog, data=incumbent)
summary(q1)
##Make a scatterplot and add regression line
plot(incumbent$difflog, incumbent$voteshare, main='Title',xlab='difflog',ylab='vote share')
abline(lm(voteshare~difflog, data=incumbent),col='red')
# Save the residuals in a separate object
q1residuals <- q1$residuals ##Accessing the residuals using the "$" input
head(q1residuals)
#Question2
q2 <- lm(presvote~difflog, data=incumbent)
summary(q2)
#Scatterplot + Regression line
plot(incumbent$difflog,incumbent$presvote, main='Title',xlab='difflog',ylab='presvote')
abline(q2,col='blue')
#Saving the residuals in a separate object
q2residuals <- q2$residuals
head(q2residuals)
q3 <- lm(voteshare~presvote, data=incumbent)
summary(q3)
#Q4
q4 <- lm(q1$residuals~q2$residuals, data=incumbent)
summary(q4)
q5 <- lm(voteshare~difflog+presvote, data=incumbent)
summary(q5)
